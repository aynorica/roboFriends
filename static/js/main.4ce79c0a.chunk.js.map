{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Header.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Header","nextProps","nextState","console","log","Component","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","info","this","setState","requestRobots","dispatch","url","fetch","then","response","json","data","payload","catch","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4ce79c0a.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField:action.payload});\r\n        // another way === return { ...state, searchField:action.payload }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true});\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending:false});\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending:false});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='Search Robots'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate (nextProps, nextState) {\r\n    return false;\r\n  }\r\n  render() {\r\n    console.log('Header');\r\n    return <h1 className='f1'>RoboFriends</h1>\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render () {\r\n        if(this.state.hasError) {\r\n            return <h1>Oooops, Something went wrong</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\nimport { getAPI } from './api/api';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  getAPI('https://jsonplaceholder.typicode.com/users')\r\n    .then(data =>\r\n      dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS, payload:data\r\n      }))\r\n    .catch(error =>\r\n       dispatch({\r\n         type: REQUEST_ROBOTS_FAILED, payload:error\r\n       }));\r\n}\r\n","export const getAPI = (url) => fetch(url).then(response => response.json());\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Header from '../components/Header';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    isPending: state.requestRobots.isPending,\r\n    robots: state.requestRobots.robots,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n    //This is the same as this --> requestRobots(dispatch) but in that case you need to make your reducer a higher order function\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n                <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n, document.getElementById('root'));\r\nserviceWorker.register();\r\n"],"sourceRoot":""}